#include "ana_helper.h"

namespace ana_helper {

    // ____________________________________________________________________________________________
    TCanvas* add_tab(TGTab *tab, const char* tabName) {
        // タブを作成し、キャンバスを埋め込む
        TGCompositeFrame *tf = tab->AddTab(tabName);
        TRootEmbeddedCanvas *embeddedCanvas = new TRootEmbeddedCanvas(tabName, tf, 1000, 800);
       tf->AddFrame(embeddedCanvas, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
        return embeddedCanvas->GetCanvas();
    }
    
    
    // ____________________________________________________________________________________________
    std::vector<Int_t> get_should_hit_ch(Int_t run_number) {

        static const std::unordered_map<Int_t, std::vector<Int_t>> kev_ch_map = {
            // Condition 1
            {300, {0}},       {301, {0}},       {302, {1}},       {303, {1, 2}},    {304, {2}},
            {305, {2, 3}},    {306, {3}},       {307, {}},        {308, {}},        {310, {0}},
            {312, {0}},       {313, {1}},       {314, {1, 2}},    {315, {2}},       {316, {2, 3}},
            {317, {3}},       {318, {}},        {319, {}},        {322, {0}},       {323, {0}},
            {324, {1}},       {325, {1, 2}},    {327, {2, 3}},    {328, {3}},       {329, {2}},
            {330, {}},        {331, {}},        {333, {0}},       {334, {0}},       {335, {1}},
            {336, {1, 2}},    {338, {2}},       {339, {2, 3}},    {340, {3}},       {341, {}},
            {342, {}},        {344, {0}},       {345, {0}},       {346, {1}},       {347, {1, 2}},
            {348, {2}},       {349, {2, 3}},    {350, {3}},       {351, {}},        {352, {3}},
            {353, {2, 3}},    {354, {}},        {357, {}},        {360, {1, 2}},    {361, {1}},
            {362, {}},        {363, {0}},       {365, {0}},       {366, {1}},       {368, {1, 2}},
            {371, {2}},       {372, {2, 3}},    {373, {3}},       {374, {}},        {376, {}},
            {378, {0}},       {379, {0}},       {380, {1}},       {381, {1, 2}},    {382, {2}},
            {383, {2, 3}},    {384, {3}},       {385, {}},        {386, {}},        {388, {2}},
            {390, {0}},       {391, {}},        {392, {0, 1}},

            // Condition 2
            {447, {1}},       {448, {1}},       {449, {1}},       {450, {1}},       {451, {1}},
            {452, {1}},       {453, {1}},       {454, {1}},       {455, {1}},       {457, {1, 2}},
            {458, {1, 2}},    {459, {1, 2}},    {460, {1, 2}},    {461, {1, 2}},    {462, {1, 2}},
            {463, {1, 2}},    {464, {1, 2}},    {465, {1, 2}},    {467, {2, 3}},    {468, {2, 3}},
            {469, {2, 3}},    {470, {2, 3}},    {471, {2, 3}},    {472, {2, 3}},    {473, {2, 3}},
            {474, {2, 3}},    {475, {2, 3}},    {477, {3}},       {478, {3}},       {479, {3}},
            {480, {3}},       {481, {3}},       {482, {3}},       {483, {3}},       {484, {3}},
            {485, {3}},       {487, {0, 1}},    {488, {0, 1}},    {489, {0, 1}},    {490, {0, 1}},
            {491, {0, 1}},    {492, {0, 1}},    {493, {0, 1}},    {494, {0, 1}},    {495, {0, 1}},
            {497, {0}},       {498, {0}},       {499, {0}},       {500, {0}},       {501, {0}},
            {502, {0}},       {503, {0}},       {504, {0}},       {505, {0}},       {507, {}},
            {508, {}},        {509, {}},        {510, {}},        {511, {}},        {512, {}},
            {513, {}},        {514, {}},        {515, {}},        {517, {}},        {518, {}},
            {519, {}},        {521, {0}},       {522, {0}},       {523, {0}},       {525, {2, 3}},
            {526, {2, 3}},    {527, {2, 3}},    {529, {3}},       {530, {3}},       {531, {3}}
        };

        auto it = kev_ch_map.find(run_number);
        return (it != kev_ch_map.end()) ? it->second : std::vector<Int_t>{};
    }

    // ____________________________________________________________________________________________
    Int_t get_pedestal_run_num(Int_t run_number) {
        
        static const std::vector<std::tuple<Int_t, Int_t, Int_t>> pedestal_run_num_map = {
            // condition 1
            {300, 308, 309},
            {310, 319, 320},
            {322, 331, 332},
            {333, 342, 343},
            {344, 354, 355},
            {357, 362, 355},
            {363, 376, 377},
            {378, 386, 387},
            {388, 392, 387},

            // condition 2
            {447, 455, 456},
            {457, 465, 466},
            {467, 475, 476},
            {477, 485, 486},
            {487, 495, 496},
            {497, 505, 506},
            {507, 515, 516},
            {517, 519, 520},
            {521, 523, 524},
            {525, 527, 528},
            {529, 531, 532}
        };

        for (const auto& [start, end, pedestal] : pedestal_run_num_map) {
            if (start <= run_number && run_number <= end) {
                return pedestal;
            }
        }
        return -1;
    }

    // ____________________________________________________________________________________________
    std::pair<Int_t, Int_t> get_scan_position(Int_t run_number) {

        static const std::unordered_map<Int_t, std::pair<Int_t, Int_t>> scan_position_map = {
            // Condition 1
            {300, {-64,   0}}, {301, {-48,   0}}, {302, {-32,   0}}, {303, {-16,   0}}, {304, {  0,   0}},
            {305, { 16,   0}}, {306, { 32,   0}}, {307, { 48,   0}}, {308, { 64,   0}}, {309, {  0,   0}},
            {310, {-64, -18}}, {311, {-48, -18}}, {312, {-48, -18}}, {313, {-32, -18}}, {314, {-16, -18}},
            {315, {  0, -18}}, {316, { 16, -18}}, {317, { 32, -18}}, {318, { 48, -18}}, {319, { 64, -18}},
            {320, {  0, -18}}, {321, {-64, -36}}, {322, {-64, -36}}, {323, {-48, -36}}, {324, {-32, -36}},
            {325, {-16, -36}}, {326, {  0, -36}}, {327, { 16, -36}}, {328, { 32, -36}}, {329, {  0, -36}},
            {330, { 48, -36}}, {331, { 64, -36}}, {332, {  0, -18}}, {333, {-64, -54}}, {334, {-48, -54}},
            {335, {-32, -54}}, {336, {-16, -54}}, {337, {  0, -54}}, {338, {  0, -54}}, {339, { 16, -54}},
            {340, { 32, -54}}, {341, { 48, -54}}, {342, { 64, -54}}, {343, {  0, -54}}, {344, {-64,  18}},
            {345, {-48,  18}}, {346, {-32,  18}}, {347, {-16,  18}}, {348, {  0,  18}}, {349, { 16,  18}},
            {350, { 32,  18}}, {351, { 48,  18}}, {352, { 32,  18}}, {353, { 16,  18}}, {354, { 64,  18}},
            {355, {  0,  18}}, {357, { 64, -18}}, {358, {-16, -54}}, {359, {-16, -54}}, {360, {-16, -54}},
            {361, {-32, -54}}, {362, { 64, -36}}, {363, {-64,  36}}, {364, {-48,  36}}, {365, {-48,  36}},
            {366, {-32,  36}}, {367, {-16,  36}}, {368, {-16,  36}}, {369, {  0,  36}}, {370, {  0,  36}},
            {371, {  0,  36}}, {372, { 16,  36}}, {373, { 32,  36}}, {374, { 48,  36}}, {375, { 64,  36}},
            {376, { 64,  36}}, {377, {  0,  36}}, {378, {-64,  54}}, {379, {-48,  54}}, {380, {-32,  54}},
            {381, {-16,  54}}, {382, {  0,  54}}, {383, { 16,  54}}, {384, { 32,  54}}, {385, { 48,  54}},
            {386, { 64,  54}}, {387, {  0,  54}}, {388, {  0,  51}}, {389, {-48,  51}}, {390, {-48,  51}},
            {391, { 48,  51}}, {392, {-39,  51}},

            // Condition 2
            {447, {-64,   0}}, {448, {-48,   0}}, {449, {-32,   0}}, {450, {-16,   0}}, {451, {  0,   0}},
            {452, { 16,   0}}, {453, { 32,   0}}, {454, { 48,   0}}, {455, { 64,   0}}, {456, {  0,   0}},
            {457, {-64, -18}}, {458, {-48, -18}}, {459, {-32, -18}}, {460, {-16, -18}}, {461, {  0, -18}},
            {462, { 16, -18}}, {463, { 32, -18}}, {464, { 48, -18}}, {465, { 64, -18}}, {466, {  0, -18}},
            {467, {-64, -36}}, {468, {-48, -36}}, {469, {-32, -36}}, {470, {-16, -36}}, {471, {  0, -36}},
            {472, { 16, -36}}, {473, { 32, -36}}, {474, { 48, -36}}, {475, { 64, -36}}, {476, {  0, -36}},
            {477, {-64, -54}}, {478, {-48, -54}}, {479, {-32, -54}}, {480, {-16, -54}}, {481, {  0, -54}},
            {482, { 16, -54}}, {483, { 32, -54}}, {484, { 48, -54}}, {485, { 64, -54}}, {486, {  0,  54}},
            {487, {-64,  18}}, {488, {-48,  18}}, {489, {-32,  18}}, {490, {-16,  18}}, {491, {  0,  18}},
            {492, { 16,  18}}, {493, { 32,  18}}, {494, { 48,  18}}, {495, { 64,  18}}, {496, {  0,  18}},
            {497, {-64,  36}}, {498, {-48,  36}}, {499, {-32,  36}}, {500, {-16,  36}}, {501, {  0,  36}},
            {502, { 16,  36}}, {503, { 32,  36}}, {504, { 48,  36}}, {505, { 64,  36}}, {506, {  0,  36}},
            {507, {-64,  54}}, {508, {-48,  54}}, {509, {-32,  54}}, {510, {-16,  54}}, {511, {  0,  54}},
            {512, { 16,  54}}, {513, { 32,  54}}, {514, { 48,  54}}, {515, { 64,  54}}, {516, {  0,  54}},
            {517, {-48,  51}}, {518, {  0,  51}}, {519, { 48,  51}}, {520, {  0,  51}}, {521, {-48,  45}},
            {522, {  0,  45}}, {523, { 48,  45}}, {524, {  0,  45}}, {525, {-48, -45}}, {526, {  0, -45}},
            {527, { 48, -45}}, {528, {  0, -45}}, {529, {-48, -51}}, {530, {  0, -51}}, {531, { 48, -51}},
            {532, {  0, -51}}
        };

        auto it = scan_position_map.find(run_number);
        return (it != scan_position_map.end()) ? it->second : std::pair<Int_t, Int_t>{0, 0};
    }

    // ____________________________________________________________________________________________
    std::pair<Double_t, Double_t> cal_one_photon_gain(std::pair<Double_t, Double_t> mean, std::pair<Double_t, Double_t> pedestal, std::pair<Double_t, Double_t> n_pedestal, Double_t n_total) {
        Double_t mu = -TMath::Log( n_pedestal.first / n_total );
        Double_t gain = ( mean.first - pedestal.first ) / mu;
        
        // -- cal error propagation -----
        Double_t pdv_mean = 1.0/mu;
        Double_t pdv_ped = -1.0/mu;
        Double_t pdv_n_ped = gain / (n_pedestal.first * mu);
        Double_t error = TMath::Sqrt( TMath::Power(pdv_mean*mean.second, 2.0) + TMath::Power(pdv_ped*pedestal.second, 2.0) + TMath::Power(pdv_n_ped*n_pedestal.second, 2.0) );
        
        std::pair<Double_t, Double_t> one_photon_gain{gain, error};
        return one_photon_gain;
    }

}